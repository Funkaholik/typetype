// Generated by CoffeeScript 1.7.1
(function() {
  var $;

  ($ = jQuery).fn.extend({
    typetype: function(txt, keypress) {
      var charDelay, elem, errorProb, interval;
      charDelay = 100;
      errorProb = 0.04;
      interval = function(index) {
        return Math.random() * charDelay * (txt[index - 1] === txt[index] ? 1.6 : txt[index - 1] === '.' ? 12 : txt[index - 1] === '!' ? 12 : txt[index - 1] === '\n' ? 12 : txt[index - 1] === ',' ? 8 : txt[index - 1] === ';' ? 8 : txt[index - 1] === ' ' ? 3 : 2);
      };
      return $.when.apply($, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          elem = this[_i];
          _results.push((function(elem) {
            var append, backsp, deferred, delChar, typeChar, typeTo;
            if (elem.tagName.toLowerCase() === 'input' || elem.tagName.toLowerCase() === 'textarea') {
              typeChar = function(c) {
                return elem.value += c;
              };
              delChar = function() {
                return elem.value = elem.value.substr(0, elem.value.length - 1);
              };
            } else {
              typeChar = function(c) {
                return elem.innerHTML += c;
              };
              delChar = function() {
                return elem.innerHTML = elem.innerHTML.substr(0, elem.innerHTML.length - 1);
              };
            }
            append = function(str, cont) {
              if (str.length) {
                typeChar(str[0]);
                setTimeout((function() {
                  return append(str.substr(1), cont);
                }), charDelay);
              } else {
                cont();
              }
            };
            backsp = function(num, cont) {
              if (num) {
                delChar();
                setTimeout((function() {
                  return backsp(num - 1, cont);
                }), charDelay);
              } else {
                cont();
              }
            };
            return deferred = $.Deferred((typeTo = function(i) {
              var afterErr, r;
              if (txt.length > i) {
                r = Math.random() / errorProb;
                afterErr = function() {
                  return setTimeout((function() {
                    return typeTo(i);
                  }), interval(i));
                };
                if (0.3 > r && txt[i - 1] !== txt[i]) {
                  append(txt.substr(i, 4), function() {
                    return backsp(4, afterErr);
                  });
                } else if (0.5 > r && txt[i - 1] !== txt[i]) {
                  append(txt.substr(i, 1), function() {
                    return backsp(1, afterErr);
                  });
                } else if (0.8 > r && txt[i - 1] !== txt[i]) {
                  append(txt[i] + txt[i - 1], function() {
                    return backsp(2, afterErr);
                  });
                } else if (1.0 > r && i > 1 && txt[i - 2] !== txt[i - 2].toLowerCase()) {
                  append(txt[i - 1].toUpperCase() + txt[i], function() {
                    return backsp(2, afterErr);
                  });
                } else {
                  typeChar(txt[i - 1]);
                  if (keypress) {
                    keypress.call(elem, i);
                  }
                  setTimeout((function() {
                    return typeTo(i + 1);
                  }), interval(i));
                }
              } else {
                deferred.resolve();
              }
            })(1));
          })(elem));
        }
        return _results;
      }).call(this));
    }
  });

}).call(this);
