// Generated by CoffeeScript 1.7.1
(function() {
  var $;

  $ = jQuery;

  $.fn.extend({
    typetype: function(txt, callback, keypress) {
      var charDelay, deferreds, elem, errorProb, interval;
      charDelay = 100;
      errorProb = 0.04;
      interval = function(index) {
        var lastchar, nextchar;
        lastchar = txt[index - 1];
        nextchar = txt[index];
        return Math.random() * charDelay * (function() {
          switch (lastchar) {
            case nextchar:
              return 1.6;
            case '.':
            case '!':
              return 12;
            case ',':
            case ';':
              return 8;
            case ' ':
              return 3;
            case '\n':
              return 12;
            default:
              return 2;
          }
        })();
      };
      deferreds = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          elem = this[_i];
          _results.push((function(elem) {
            var append, backsp, deferred, delChar, tag, typeChar, typeTo;
            if (tag = elem.tagName.toLowerCase() === 'input' || tag === 'textarea') {
              typeChar = function(c) {
                return elem.value += c;
              };
              delChar = function() {
                return elem.value = elem.value.substr(0, elem.value.length - 1);
              };
            } else {
              typeChar = function(c) {
                return elem.innerHTML += c;
              };
              delChar = function() {
                return elem.innerHTML = elem.innerHTML.substr(0, elem.innerHTML.length - 1);
              };
            }
            append = function(str, cont) {
              if (str.length > 0) {
                typeChar(str[0]);
                return setTimeout((function() {
                  return append(str.substr(1), cont);
                }), charDelay);
              } else {
                return cont();
              }
            };
            backsp = function(num, cont) {
              if (num > 0) {
                delChar();
                return setTimeout((function() {
                  return backsp(num - 1, cont);
                }), 1.5 * charDelay);
              } else {
                return cont();
              }
            };
            deferred = $.Deferred();
            typeTo = function(i) {
              var afterErr, r;
              if (i < txt.length) {
                r = Math.random();
                afterErr = function() {
                  return setTimeout((function() {
                    return typeTo(i);
                  }), interval(i));
                };
                switch (false) {
                  case !(r < 0.3 * errorProb && txt[i - 1] !== txt[i]):
                    append(txt.substr(i, 4), function() {
                      return backsp(4, afterErr);
                    });
                    break;
                  case !(r < 0.5 * errorProb && txt[i - 1] !== txt[i]):
                    append(txt.substr(i, 1), function() {
                      return backsp(1, afterErr);
                    });
                    break;
                  case !(r < 0.8 * errorProb && txt[i - 1] !== txt[i]):
                    append(txt[i] + txt[i - 1], function() {
                      return backsp(2, afterErr);
                    });
                    break;
                  case !(r < 1.0 * errorProb && i > 1 && txt[i - 2].toUpperCase() === txt[i - 2]):
                    append(txt[i - 1].toUpperCase() + txt[i], function() {
                      return backsp(2, afterErr);
                    });
                    break;
                  default:
                    typeChar(txt[i - 1]);
                    if (keypress != null) {
                      keypress.call(elem, i);
                    }
                    setTimeout((function() {
                      return typeTo(i + 1);
                    }), interval(i));
                }
              } else {
                deferred.resolve();
              }
            };
            typeTo(1);
            return deferred.done(function() {
              return callback != null ? callback.call(elem) : void 0;
            });
          })(elem));
        }
        return _results;
      }).call(this);
      return $.when.apply($, deferreds);
    }
  });

}).call(this);
